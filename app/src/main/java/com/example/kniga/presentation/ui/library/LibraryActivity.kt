package com.example.kniga.presentation.ui.library

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.lifecycle.lifecycleScope
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.clickable
import androidx.compose.foundation.combinedClickable
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.lazy.grid.itemsIndexed
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.kniga.data.local.AppDatabase
import com.example.kniga.data.local.entity.Book
import com.example.kniga.data.repository.BookRepository
import com.example.kniga.data.repository.CloudSyncRepository
import com.example.kniga.data.service.BookImportService
import com.example.kniga.data.remote.RetrofitClient
import com.example.kniga.data.remote.dto.BookDto
import com.example.kniga.presentation.ui.reader.ReaderActivity
import com.example.kniga.presentation.ui.settings.SettingsActivity
import com.example.kniga.presentation.ui.statistics.StatisticsActivity
import com.example.kniga.presentation.activity.CloudLibraryActivity
import com.example.kniga.ui.theme.KnigaTheme
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import java.io.File

class LibraryActivity : ComponentActivity() {
    
    private lateinit var bookRepository: BookRepository
    private lateinit var bookImportService: BookImportService
    private lateinit var cloudSyncRepository: CloudSyncRepository
    
    private val filePickerLauncher = registerForActivityResult(
        ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        uri?.let { importBook(it) }
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        val database = AppDatabase.getDatabase(this)
        bookRepository = BookRepository(database.bookDao())
        bookImportService = BookImportService(this, bookRepository)
        cloudSyncRepository = CloudSyncRepository(
            RetrofitClient.apiService,
            database.bookDao(),
            database.cloudBookDao(),
            database.userDao(),
            this
        )
        
        lifecycleScope.launch {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            com.example.kniga.utils.MockData.createMockUser(database.userDao())
        }
        
        setContent {
            KnigaTheme {
                LibraryScreen(
                    bookRepository = bookRepository,
                    cloudSyncRepository = cloudSyncRepository,
                    onBookClick = { book ->
                        val intent = Intent(this, ReaderActivity::class.java)
                        intent.putExtra("book_id", book.id)
                        startActivity(intent)
                    },
                    onBookDelete = { book ->
                        lifecycleScope.launch {
                            bookRepository.deleteBook(book)
                            Toast.makeText(
                                this@LibraryActivity,
                                "–ö–Ω–∏–≥–∞ \"${book.title}\" —É–¥–∞–ª–µ–Ω–∞",
                                Toast.LENGTH_SHORT
                            ).show()
                        }
                    },
                    onAddBookClick = {
                        filePickerLauncher.launch("*/*")
                    },
                    onSettingsClick = {
                        startActivity(Intent(this, SettingsActivity::class.java))
                    },
                    onStatisticsClick = {
                        startActivity(Intent(this, StatisticsActivity::class.java))
                    },
                    onCloudBooksClick = {
                        startActivity(Intent(this, CloudLibraryActivity::class.java))
                    }
                )
            }
        }
    }
    
    private fun importBook(uri: Uri) {
        lifecycleScope.launch {
            try {
                Toast.makeText(this@LibraryActivity, "–ò–º–ø–æ—Ä—Ç –∫–Ω–∏–≥–∏...", Toast.LENGTH_SHORT).show()
                
                val result = bookImportService.importBook(uri)
                
                result.onSuccess { book ->
                    Toast.makeText(
                        this@LibraryActivity,
                        "–ö–Ω–∏–≥–∞ \"${book.title}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                        Toast.LENGTH_LONG
                    ).show()
                }.onFailure { error ->
                    Toast.makeText(
                        this@LibraryActivity,
                        "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}",
                        Toast.LENGTH_LONG
                    ).show()
                }
            } catch (e: Exception) {
                Toast.makeText(
                    this@LibraryActivity,
                    "–û—à–∏–±–∫–∞: ${e.message}",
                    Toast.LENGTH_LONG
                ).show()
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LibraryScreen(
    bookRepository: BookRepository,
    cloudSyncRepository: CloudSyncRepository,
    onBookClick: (Book) -> Unit,
    onBookDelete: (Book) -> Unit,
    onAddBookClick: () -> Unit,
    onSettingsClick: () -> Unit,
    onStatisticsClick: () -> Unit,
    onCloudBooksClick: () -> Unit
) {
    val context = androidx.compose.ui.platform.LocalContext.current
    var books by remember { mutableStateOf<List<Book>>(emptyList()) }
    var cloudBooks by remember { mutableStateOf<List<com.example.kniga.data.local.entity.CloudBook>>(emptyList()) }
    var selectedFilter by remember { mutableStateOf("all") }
    var searchQuery by remember { mutableStateOf("") }
    var showSearch by remember { mutableStateOf(false) }
    var showMenu by remember { mutableStateOf(false) }
    var selectedTab by remember { mutableStateOf(0) }
    var bookToDelete by remember { mutableStateOf<Book?>(null) }
    var showDeleteDialog by remember { mutableStateOf(false) }
    var uploadingBooks by remember { mutableStateOf<Set<Long>>(emptySet()) }
    var syncingBooks by remember { mutableStateOf<Set<Long>>(emptySet()) }
    var downloadingBooks by remember { mutableStateOf<Set<String>>(emptySet()) }
    
    val scope = rememberCoroutineScope()
    
    LaunchedEffect(selectedFilter, selectedTab) {
        if (selectedTab == 0) {
            val flow = when (selectedFilter) {
                "reading" -> bookRepository.getReadingBooks()
                "completed" -> bookRepository.getCompletedBooks()
                "not_started" -> bookRepository.getNotStartedBooks()
                "favorites" -> bookRepository.getFavoriteBooks()
                else -> bookRepository.getAllBooks()
            }
            
            flow.collectLatest { bookList ->
                books = bookList
            }
        }
    }
    
    LaunchedEffect(selectedTab) {
        if (selectedTab == 1) {
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–ª–∞—á–Ω—ã—Ö –∫–Ω–∏–≥
            cloudSyncRepository.getAllCloudBooks().collectLatest { cloudBooksList ->
                cloudBooks = cloudBooksList
            }
        }
    }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { 
                    if (showSearch) {
                        TextField(
                            value = searchQuery,
                            onValueChange = { searchQuery = it },
                            placeholder = { Text("–ü–æ–∏—Å–∫ –∫–Ω–∏–≥...") },
                            modifier = Modifier.fillMaxWidth(),
                            colors = TextFieldDefaults.colors(
                                focusedContainerColor = Color.Transparent,
                                unfocusedContainerColor = Color.Transparent
                            )
                        )
                    } else {
                        Text("–ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", fontWeight = FontWeight.Bold) 
                    }
                },
                actions = {
                    if (!showSearch) {
                        IconButton(onClick = { showSearch = true }) {
                            Text("üîç", fontSize = 24.sp)
                        }
                        Box {
                            IconButton(onClick = { showMenu = !showMenu }) {
                                Text("‚ãÆ", fontSize = 28.sp, fontWeight = FontWeight.Bold)
                            }
                            DropdownMenu(
                                expanded = showMenu,
                                onDismissRequest = { showMenu = false }
                            ) {
                                DropdownMenuItem(
                                    text = { Text("‚òÅÔ∏è –û–±–ª–∞—á–Ω—ã–µ –∫–Ω–∏–≥–∏") },
                                    onClick = {
                                        showMenu = false
                                        onCloudBooksClick()
                                    },
                                    leadingIcon = { Text("‚òÅÔ∏è") }
                                )
                                Divider()
                                DropdownMenuItem(
                                    text = { Text("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ") },
                                    onClick = {
                                        showMenu = false
                                        selectedFilter = "favorites"
                                    },
                                    leadingIcon = { Text("‚≠ê") }
                                )
                                Divider()
                                DropdownMenuItem(
                                    text = { Text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") },
                                    onClick = {
                                        showMenu = false
                                        onStatisticsClick()
                                    },
                                    leadingIcon = { Text("üìä") }
                                )
                                DropdownMenuItem(
                                    text = { Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏") },
                                    onClick = {
                                        showMenu = false
                                        onSettingsClick()
                                    },
                                    leadingIcon = { Text("‚öôÔ∏è") }
                                )
                            }
                        }
                    } else {
                        IconButton(onClick = { 
                            showSearch = false
                            searchQuery = ""
                        }) {
                            Text("‚úï", fontSize = 24.sp)
                        }
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer,
                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer
                )
            )
        },
        bottomBar = {
            NavigationBar(
                containerColor = MaterialTheme.colorScheme.surfaceContainer
            ) {
                NavigationBarItem(
                    icon = { Text("üìö", fontSize = 24.sp) },
                    label = { Text("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞") },
                    selected = selectedTab == 0,
                    onClick = { selectedTab = 0 }
                )
                NavigationBarItem(
                    icon = { Text("‚òÅÔ∏è", fontSize = 24.sp) },
                    label = { Text("–û–±–ª–∞–∫–æ") },
                    selected = selectedTab == 1,
                    onClick = { selectedTab = 1 }
                )
                NavigationBarItem(
                    icon = { Text("üìä", fontSize = 24.sp) },
                    label = { Text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") },
                    selected = selectedTab == 2,
                    onClick = {
                        selectedTab = 2
                        onStatisticsClick()
                    }
                )
                NavigationBarItem(
                    icon = { Text("‚öôÔ∏è", fontSize = 24.sp) },
                    label = { Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏") },
                    selected = selectedTab == 3,
                    onClick = {
                        selectedTab = 3
                        onSettingsClick()
                    }
                )
            }
        },
        floatingActionButton = {
            ExtendedFloatingActionButton(
                onClick = onAddBookClick,
                icon = { Text("‚ûï", fontSize = 20.sp) },
                text = { Text("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É") }
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            when (selectedTab) {
                0 -> {
                    FilterChips(
                        selectedFilter = selectedFilter,
                        onFilterSelected = { selectedFilter = it }
                    )
                    
                    if (books.isEmpty()) {
                        Box(
                            modifier = Modifier.fillMaxSize(),
                            contentAlignment = Alignment.Center
                        ) {
                            EmptyLibraryView()
                        }
                    } else {
                        BookGrid(
                            books = books,
                            uploadingBooks = uploadingBooks,
                            syncingBooks = syncingBooks,
                            onBookClick = onBookClick,
                            onBookLongClick = { book ->
                                bookToDelete = book
                                showDeleteDialog = true
                            },
                            onFavoriteClick = { book ->
                                scope.launch {
                                    bookRepository.updateBook(book.copy(isFavorite = !book.isFavorite))
                                    Toast.makeText(
                                        context,
                                        if (!book.isFavorite) "‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" else "üíî –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                                        Toast.LENGTH_SHORT
                                    ).show()
                                }
                            },
                            onUploadClick = { book ->
                                if (!uploadingBooks.contains(book.id)) {
                                    uploadingBooks = uploadingBooks + book.id
                                    Toast.makeText(context, "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏ \"${book.title}\" –≤ –æ–±–ª–∞–∫–æ...", Toast.LENGTH_SHORT).show()
                                    scope.launch {
                                        val result = cloudSyncRepository.uploadBookToCloud(book)
                                        uploadingBooks = uploadingBooks - book.id
                                        
                                        result.onSuccess { cloudBook ->
                                            Toast.makeText(
                                                context, 
                                                "‚úÖ –ö–Ω–∏–≥–∞ \"${book.title}\" –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –æ–±–ª–∞–∫–æ!\n–¢–µ–ø–µ—Ä—å –µ—ë –≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                                                Toast.LENGTH_LONG
                                            ).show()
                                        }.onFailure { error ->
                                            Toast.makeText(
                                                context,
                                                "‚ùå ${error.message}",
                                                Toast.LENGTH_LONG
                                            ).show()
                                        }
                                    }
                                }
                            },
                            onSyncClick = { book ->
                                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –æ–±–ª–∞–∫–∞
                                // –û–±–ª–∞–∫–æ —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–Ω–∏–≥–∞–º–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                                Toast.makeText(
                                    context,
                                    "‚ÑπÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                                    Toast.LENGTH_SHORT
                                ).show()
                            }
                        )
                    }
                }
                1 -> {
                    CloudBooksTab(
                        cloudBooks = cloudBooks,
                        downloadingBooks = downloadingBooks,
                        cloudSyncRepository = cloudSyncRepository,
                        context = context,
                        onDownloadClick = { cloudBook ->
                            downloadingBooks = downloadingBooks + cloudBook.cloudId
                            scope.launch {
                                Toast.makeText(context, "üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ \"${cloudBook.title}\"...", Toast.LENGTH_SHORT).show()
                                val result = cloudSyncRepository.downloadCloudBook(cloudBook)
                                downloadingBooks = downloadingBooks - cloudBook.cloudId
                                
                                result.onSuccess {
                                    Toast.makeText(context, "‚úÖ –ö–Ω–∏–≥–∞ \"${cloudBook.title}\" —Å–∫–∞—á–∞–Ω–∞", Toast.LENGTH_SHORT).show()
                                }.onFailure { error ->
                                    Toast.makeText(context, "‚ùå ${error.message}", Toast.LENGTH_LONG).show()
                                }
                            }
                        },
                        onDeleteClick = { cloudBook ->
                            scope.launch {
                                Toast.makeText(context, "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ \"${cloudBook.title}\"...", Toast.LENGTH_SHORT).show()
                                val result = cloudSyncRepository.deleteCloudBook(cloudBook)
                                
                                result.onSuccess {
                                    Toast.makeText(context, "‚úÖ –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ–±–ª–∞–∫–∞", Toast.LENGTH_SHORT).show()
                                }.onFailure { error ->
                                    Toast.makeText(context, "‚ùå ${error.message}", Toast.LENGTH_LONG).show()
                                }
                            }
                        }
                    )
                }
            }
        }
        
        if (showDeleteDialog && bookToDelete != null) {
            AlertDialog(
                onDismissRequest = { showDeleteDialog = false },
                title = { Text("–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É?") },
                text = { Text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å \"${bookToDelete!!.title}\"?") },
                confirmButton = {
                    TextButton(
                        onClick = {
                            onBookDelete(bookToDelete!!)
                            showDeleteDialog = false
                            bookToDelete = null
                        }
                    ) {
                        Text("–£–¥–∞–ª–∏—Ç—å", color = MaterialTheme.colorScheme.error)
                    }
                },
                dismissButton = {
                    TextButton(onClick = { showDeleteDialog = false }) {
                        Text("–û—Ç–º–µ–Ω–∞")
                    }
                }
            )
        }
    }
}

@Composable
fun FilterChips(
    selectedFilter: String,
    onFilterSelected: (String) -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 12.dp),
        horizontalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        val filters = listOf(
            "all" to "üìö –í—Å–µ",
            "reading" to "üìñ –ß–∏—Ç–∞—é",
            "completed" to "‚úÖ –ì–æ—Ç–æ–≤–æ"
        )
        
        filters.forEach { (id, label) ->
            FilterChip(
                selected = selectedFilter == id,
                onClick = { onFilterSelected(id) },
                label = { 
                    Text(
                        label,
                        fontWeight = if (selectedFilter == id) FontWeight.Bold else FontWeight.Normal,
                        fontSize = 14.sp
                    ) 
                },
                colors = FilterChipDefaults.filterChipColors(
                    selectedContainerColor = MaterialTheme.colorScheme.primary,
                    selectedLabelColor = MaterialTheme.colorScheme.onPrimary,
                    containerColor = MaterialTheme.colorScheme.surfaceVariant
                ),
                border = if (selectedFilter == id) null else FilterChipDefaults.filterChipBorder(
                    enabled = true,
                    selected = false,
                    borderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)
                )
            )
        }
    }
}

@Composable
fun BookGrid(
    books: List<Book>,
    uploadingBooks: Set<Long>,
    syncingBooks: Set<Long>,
    onBookClick: (Book) -> Unit,
    onBookLongClick: (Book) -> Unit,
    onUploadClick: (Book) -> Unit,
    onSyncClick: (Book) -> Unit,
    onFavoriteClick: (Book) -> Unit
) {
    LazyVerticalGrid(
        columns = GridCells.Fixed(2),
        contentPadding = PaddingValues(16.dp),
        horizontalArrangement = Arrangement.spacedBy(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        items(books) { book ->
            BookCard(
                book = book,
                isUploading = uploadingBooks.contains(book.id),
                isSyncing = syncingBooks.contains(book.id),
                onClick = { onBookClick(book) },
                onLongClick = { onBookLongClick(book) },
                onUploadClick = { onUploadClick(book) },
                onSyncClick = { onSyncClick(book) },
                onFavoriteClick = { onFavoriteClick(book) }
            )
        }
    }
}

@Composable
@OptIn(ExperimentalFoundationApi::class)
fun BookCard(
    book: Book,
    isUploading: Boolean,
    isSyncing: Boolean,
    onClick: () -> Unit,
    onLongClick: () -> Unit,
    onUploadClick: () -> Unit,
    onSyncClick: () -> Unit,
    onFavoriteClick: () -> Unit
) {
    var isPressed by remember { mutableStateOf(false) }
    var showMenu by remember { mutableStateOf(false) }
    val scale by animateFloatAsState(
        targetValue = if (isPressed) 0.95f else 1f,
        animationSpec = spring(stiffness = Spring.StiffnessMedium)
    )
    
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .height(280.dp)
            .graphicsLayer {
                scaleX = scale
                scaleY = scale
            }
            .combinedClickable(
                onClick = {
                    // –û–±—ã—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –æ—Ç–∫—Ä—ã—Ç—å –∫–Ω–∏–≥—É
                    onClick()
                },
                onLongClick = {
                    // –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
                    isPressed = true
                    showMenu = true
                }
            )
            .shadow(8.dp, shape = RoundedCornerShape(16.dp)),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        )
    ) {
        Box(modifier = Modifier.fillMaxSize()) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(160.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .shadow(4.dp, RoundedCornerShape(12.dp))
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .background(
                                Brush.verticalGradient(
                                    colors = listOf(
                                        MaterialTheme.colorScheme.primary.copy(alpha = 0.7f),
                                        MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.9f)
                                    )
                                )
                            ),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "üìñ",
                            fontSize = 72.sp
                        )
                    }
                    
                    // –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                    Surface(
                        modifier = Modifier
                            .padding(8.dp)
                            .size(32.dp)
                            .align(Alignment.TopEnd)
                            .clickable { onFavoriteClick() },
                        shape = RoundedCornerShape(8.dp),
                        color = if (book.isFavorite) 
                            Color(0xFFFF6B6B).copy(alpha = 0.9f) 
                        else 
                            Color.White.copy(alpha = 0.7f)
                    ) {
                        Box(contentAlignment = Alignment.Center) {
                            Text(
                                text = if (book.isFavorite) "‚ù§Ô∏è" else "ü§ç",
                                fontSize = 18.sp
                            )
                        }
                    }
                }
                
                Spacer(modifier = Modifier.height(12.dp))
                
                Text(
                    text = book.title,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis,
                    color = MaterialTheme.colorScheme.onSurface
                )
                
                Text(
                    text = book.author,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )
                
                Spacer(modifier = Modifier.weight(1f))
                
                if (book.progress > 0) {
                    Column {
                        LinearProgressIndicator(
                            progress = { book.progress / 100f },
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(6.dp)
                                .clip(RoundedCornerShape(3.dp)),
                            color = MaterialTheme.colorScheme.primary,
                            trackColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f)
                        )
                        Spacer(modifier = Modifier.height(4.dp))
                        Text(
                            text = "${book.progress.toInt()}% –ø—Ä–æ—á–∏—Ç–∞–Ω–æ",
                            style = MaterialTheme.typography.labelSmall,
                            color = MaterialTheme.colorScheme.primary,
                            fontWeight = FontWeight.SemiBold
                        )
                    }
                } else {
                    Surface(
                        shape = RoundedCornerShape(6.dp),
                        color = MaterialTheme.colorScheme.secondaryContainer
                    ) {
                        Text(
                            text = "–ù–æ–≤–∞—è –∫–Ω–∏–≥–∞",
                            style = MaterialTheme.typography.labelSmall,
                            color = MaterialTheme.colorScheme.onSecondaryContainer,
                            fontWeight = FontWeight.Medium,
                            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)
                        )
                    }
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏/—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if (isUploading || isSyncing) {
                Surface(
                    modifier = Modifier
                        .align(Alignment.TopEnd)
                        .padding(8.dp)
                        .size(40.dp),
                    shape = RoundedCornerShape(20.dp),
                    color = MaterialTheme.colorScheme.primaryContainer
                ) {
                    Box(contentAlignment = Alignment.Center) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(24.dp),
                            strokeWidth = 3.dp,
                            color = MaterialTheme.colorScheme.primary
                        )
                    }
                }
            }
            
            DropdownMenu(
                expanded = showMenu,
                onDismissRequest = { 
                    showMenu = false
                    isPressed = false
                }
            ) {
                DropdownMenuItem(
                    text = { Text("üìñ –ß–∏—Ç–∞—Ç—å") },
                    onClick = {
                        showMenu = false
                        isPressed = false
                        onClick()
                    },
                    leadingIcon = { Text("üìñ", fontSize = 20.sp) }
                )
                
                Divider()
                
                if (book.cloudId == null) {
                    DropdownMenuItem(
                        text = { 
                            if (isUploading) {
                                Text("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞...")
                            } else {
                                Text("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –æ–±–ª–∞–∫–æ")
                            }
                        },
                        onClick = {
                            if (!isUploading) {
                                showMenu = false
                                isPressed = false
                                onUploadClick()
                            }
                        },
                        leadingIcon = { Text("‚¨ÜÔ∏è", fontSize = 20.sp) },
                        enabled = !isUploading
                    )
                } else {
                    DropdownMenuItem(
                        text = { 
                            Row(
                                horizontalArrangement = Arrangement.spacedBy(8.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text("‚òÅÔ∏è –í –æ–±–ª–∞–∫–µ")
                                if (isSyncing) {
                                    CircularProgressIndicator(
                                        modifier = Modifier.size(16.dp),
                                        strokeWidth = 2.dp
                                    )
                                }
                            }
                        },
                        onClick = {
                            if (!isSyncing) {
                                showMenu = false
                                isPressed = false
                                onSyncClick()
                            }
                        },
                        leadingIcon = { Text("üîÑ", fontSize = 20.sp) },
                        enabled = !isSyncing
                    )
                }
                
                Divider()
                
                DropdownMenuItem(
                    text = { Text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", color = MaterialTheme.colorScheme.error) },
                    onClick = {
                        showMenu = false
                        isPressed = false
                        onLongClick()
                    },
                    leadingIcon = { Text("üóëÔ∏è", fontSize = 20.sp) }
                )
            }
        }
    }
}

@Composable
fun EmptyLibraryView() {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp),
        modifier = Modifier.padding(32.dp)
    ) {
        Text(
            text = "üìö",
            fontSize = 72.sp
        )
        Text(
            text = "–ù–µ—Ç –∫–Ω–∏–≥",
            style = MaterialTheme.typography.headlineSmall,
            fontWeight = FontWeight.Bold
        )
        Text(
            text = "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \"+\"",
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
    }
}

@Composable
fun CloudBooksTab(
    cloudBooks: List<com.example.kniga.data.local.entity.CloudBook>,
    downloadingBooks: Set<String>,
    cloudSyncRepository: CloudSyncRepository,
    context: android.content.Context,
    onDownloadClick: (com.example.kniga.data.local.entity.CloudBook) -> Unit,
    onDeleteClick: (com.example.kniga.data.local.entity.CloudBook) -> Unit
) {
    val scope = rememberCoroutineScope()
    
    Column(modifier = Modifier.fillMaxSize()) {
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–∞–Ω–Ω–µ—Ä
        Surface(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            shape = RoundedCornerShape(12.dp),
            color = MaterialTheme.colorScheme.primaryContainer
        ) {
            Row(
                modifier = Modifier.padding(16.dp),
                horizontalArrangement = Arrangement.spacedBy(12.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text("‚òÅÔ∏è", fontSize = 32.sp)
                Column {
                    Text(
                        "–û–±–ª–∞—á–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onPrimaryContainer
                    )
                    Text(
                        "–û–±—â–∞—è –±–∞–∑–∞ –∫–Ω–∏–≥, –≤–∏–¥–∏–º–∞—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –£–¥–∞–ª–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏.",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f)
                    )
                }
            }
        }
        
        if (cloudBooks.isEmpty()) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(16.dp),
                    modifier = Modifier.padding(32.dp)
                ) {
                    Text("‚òÅÔ∏è", fontSize = 72.sp)
                    Text(
                        "–û–±–ª–∞—á–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞",
                        style = MaterialTheme.typography.headlineSmall,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–Ω–∏–≥–∏ –∏–∑ —Å–≤–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –∏—Ö —É–≤–∏–¥–µ—Ç—å",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        textAlign = TextAlign.Center
                    )
                }
            }
        } else {
            LazyVerticalGrid(
                columns = GridCells.Fixed(2),
                contentPadding = PaddingValues(16.dp),
                horizontalArrangement = Arrangement.spacedBy(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                items(cloudBooks) { cloudBook ->
                    var canDelete by remember { mutableStateOf(false) }
                    
                    LaunchedEffect(cloudBook.cloudId) {
                        canDelete = cloudSyncRepository.canDeleteCloudBook(cloudBook)
                    }
                    
                    CloudBookCard(
                        cloudBook = cloudBook,
                        isDownloading = downloadingBooks.contains(cloudBook.cloudId),
                        canDelete = canDelete,
                        onDownload = { onDownloadClick(cloudBook) },
                        onDelete = { onDeleteClick(cloudBook) }
                    )
                }
            }
        }
    }
}

@Composable
@OptIn(ExperimentalFoundationApi::class)
fun CloudBookCard(
    cloudBook: com.example.kniga.data.local.entity.CloudBook,
    isDownloading: Boolean,
    canDelete: Boolean,
    onDownload: () -> Unit,
    onDelete: () -> Unit
) {
    var isPressed by remember { mutableStateOf(false) }
    var showMenu by remember { mutableStateOf(false) }
    
    val scale by animateFloatAsState(
        targetValue = if (isPressed) 0.95f else 1f,
        animationSpec = spring(stiffness = Spring.StiffnessMedium)
    )
    
    val isDownloaded = cloudBook.localFilePath != null && File(cloudBook.localFilePath).exists()

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .height(300.dp)
            .graphicsLayer {
                scaleX = scale
                scaleY = scale
            }
            .combinedClickable(
                onClick = {
                    // –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å
                    if (!isDownloading) {
                        showMenu = true
                    }
                },
                onLongClick = {
                    // –î–ª–∏–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
                    showMenu = true
                }
            )
            .shadow(8.dp, shape = RoundedCornerShape(16.dp)),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        )
    ) {
        Box(modifier = Modifier.fillMaxSize()) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
            ) {
                // –û–±–ª–æ–∂–∫–∞
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(140.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .shadow(4.dp, RoundedCornerShape(12.dp))
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .background(
                                Brush.verticalGradient(
                                    colors = listOf(
                                        MaterialTheme.colorScheme.tertiary.copy(alpha = 0.7f),
                                        MaterialTheme.colorScheme.tertiaryContainer.copy(alpha = 0.9f)
                                    )
                                )
                            ),
                        contentAlignment = Alignment.Center
                    ) {
                        Text("üìñ", fontSize = 64.sp)
                    }
                    
                    // –ë–µ–π–¥–∂–∏–∫ —Å—Ç–∞—Ç—É—Å–∞
                    if (isDownloaded) {
                        Surface(
                            modifier = Modifier
                                .align(Alignment.TopEnd)
                                .padding(8.dp),
                            shape = RoundedCornerShape(8.dp),
                            color = MaterialTheme.colorScheme.primary
                        ) {
                            Text(
                                "‚úì –°–∫–∞—á–∞–Ω–æ",
                                modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),
                                style = MaterialTheme.typography.labelSmall,
                                color = MaterialTheme.colorScheme.onPrimary
                            )
                        }
                    }
                }

                Spacer(modifier = Modifier.height(12.dp))

                // –ù–∞–∑–≤–∞–Ω–∏–µ
                Text(
                    text = cloudBook.title,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis,
                    color = MaterialTheme.colorScheme.onSurface
                )

                // –ê–≤—Ç–æ—Ä
                Text(
                    text = cloudBook.author,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∏–≤—à–µ–º
                Text(
                    text = "üë§ ${cloudBook.uploaderUsername}",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.primary.copy(alpha = 0.7f),
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(
                        text = "‚¨áÔ∏è ${cloudBook.downloadCount}",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)
                    )
                    Text(
                        text = cloudBook.format.uppercase(),
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)
                    )
                }

                Spacer(modifier = Modifier.weight(1f))

                // –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
                if (!isDownloaded) {
                    FilledTonalButton(
                        onClick = {
                            isPressed = true
                            onDownload()
                            kotlinx.coroutines.GlobalScope.launch {
                                kotlinx.coroutines.delay(100)
                                isPressed = false
                            }
                        },
                        enabled = !isDownloading,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        if (isDownloading) {
                            CircularProgressIndicator(
                                modifier = Modifier.size(20.dp),
                                strokeWidth = 2.dp,
                                color = MaterialTheme.colorScheme.onSecondaryContainer
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
                        } else {
                            Text("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", fontSize = 16.sp)
                        }
                    }
                }
            }
            
            // Dropdown –º–µ–Ω—é
            DropdownMenu(
                expanded = showMenu,
                onDismissRequest = { showMenu = false }
            ) {
                if (!isDownloaded) {
                    DropdownMenuItem(
                        text = { Text("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å") },
                        onClick = {
                            showMenu = false
                            onDownload()
                        },
                        enabled = !isDownloading
                    )
                }
                
                if (canDelete) {
                    if (!isDownloaded) {
                        Divider()
                    }
                    DropdownMenuItem(
                        text = { Text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞") },
                        onClick = {
                            showMenu = false
                            onDelete()
                        }
                    )
                }
            }
        }
    }
}




